<?php

// Define the telegram_co2_dust_monitor class and its functions:
class telegram_co2_dust_monitor {
	public $token, $web_path, $conn, $table;
	
	public function __init__($token, $server, $conn, $table){
		$this->token = $token;
		$this->web_path = $server.$token;
		$this->conn = $conn;
		$this->table = $table;
	}
	// Telegram:
	public function send_message($id, $string){
		$new_message = $this->web_path."/sendMessage?chat_id=".$id."&text=".urlencode($string);
		file_get_contents($new_message);
	}
	
	public function send_photo($id, $photo, $caption){
	    $new_photo = $this->web_path."/sendPhoto?chat_id=".$id."&photo=".$photo."&caption=".$caption;
	    file_get_contents($new_photo);
	}

	public function send_video($id, $video, $caption){
	    $new_video = $this->web_path."/sendVideo?chat_id=".$id."&video=".$video."&caption=".$caption;
	    file_get_contents($new_video);
	}
	
	// Database Save:
	public function update_database($column, $value){
		$sql = "UPDATE `$this->table` SET `$column`='$value' LIMIT 1";
		mysqli_query($this->conn, $sql);
	}
	
	// Database Fetch:
	public function get_data_from_database($_column){
		$sql = "SELECT * FROM `$this->table` LIMIT 1";
		$result = mysqli_query($this->conn, $sql);
		if($row = mysqli_fetch_assoc($result)){
			return $row[$_column];
		}
	}
}

// Define database and server settings:
$server = array(
	"name" => "localhost",
	"username" => "<__>",
	"password" => "<__>",
	"database" => "telegramco2dustmonitor",
	"table" => "entries"

);

$conn = mysqli_connect($server["name"], $server["username"], $server["password"], $server["database"]);

// Define the new 'co2_dust_monitor' object:
$co2_dust_monitor = new telegram_co2_dust_monitor();
$bot_token = "<________________________>"; // e.g., 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
$co2_dust_monitor->__init__($bot_token, "https://api.telegram.org/bot", $conn, $server["table"]); 

// Get updates from the Telegram Bot API.
$updates = json_decode(file_get_contents('php://input'), TRUE); 
if($updates['update_id']){
	$chat_id =   $updates['message']['chat']['id'];
	$message = $updates['message']['text'];
    
	if($updates["message"]["photo"]){
		$co2_dust_monitor->send_message($chat_id, "Thank you for sending me a photo but I cannot process it yet 🎞");
	}else if($updates["message"]["video"]){
		$co2_dust_monitor->send_message($chat_id, "Thank you for sending me a video but I cannot process it yet  📹");
	}else if($updates["message"]["document"]){
		$co2_dust_monitor->send_message($chat_id, "Thank you for sending me a file but I cannot process it yet  📜");
	}else{
		// Commands:
		switch($message){
		  case '/start':
		  $co2_dust_monitor->update_database("chat_id", $chat_id); // Register the chat ID to send messages without an update by the bot. 
		  $co2_dust_monitor->send_message($chat_id, "Chat ID has been successfully registered to the application database. \n\nEnter /help to view all available commands.");
		  break;	
		  case '/co2_density':
		  $co2 = $co2_dust_monitor->get_data_from_database("co2");
		  $date = $co2_dust_monitor->get_data_from_database("date");
		  $co2_dust_monitor->send_message($chat_id, "💨 CO2 Density ➡️ $co2 ppm\n\n🕒 Last Update: $date");
		  break;	
		  case '/dust_density':
		  $dust = $co2_dust_monitor->get_data_from_database("dust");
		  $date = $co2_dust_monitor->get_data_from_database("date");
		  $co2_dust_monitor->send_message($chat_id, "🧹 Dust Density ➡️ $dust mg/m3\n\n🕒 Last Update: $date");
		  break;
		  case '/help':
		  $co2_dust_monitor->send_message($chat_id, "/co2_density - display the CO2 density generated by the MH-Z14A NDIR CO2 Sensor\n/dust_density - monitor the dust density produced by the GP2Y10 Dust Sensor");
		  break;
          default:
          $co2_dust_monitor->send_message($chat_id, "Waiting for your commands :)");
          break;		  
	    }
	}
}

// If transferred by the device (Nano RP2040 Connect), save incoming data to the database.
if(isset($_GET["co2"]) && isset($_GET["dust"])){
	$co2_dust_monitor->update_database("co2", htmlentities($_GET["co2"]));
	$co2_dust_monitor->update_database("dust", htmlentities($_GET["dust"]));
	// Set timezone:
	date_default_timezone_set("Europe/London");
	$co2_dust_monitor->update_database("date", date("Y-m-d___H:i:s"));
	echo("Data Registered Successfully!");
}

?>